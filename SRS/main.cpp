#include <iostream>
#include <stdlib.h>
#include <iomanip>

using namespace std;

#define N 9;//N表示初始化学生信息的数目

typedef struct Information_of_Student{
	char* st_num;
	char* st_name;
	char* st_sex;
	char* st_np;
	int mark_vc;
	int mark_eg;
	int mark_mt;
} stu;     //stu为结构体Information_of_Student的别名


//各函数声明
void scr_op();//用于显示主菜单
stu insert();//增加一个用户输入的学生信息
void disc(stu all[], int sum[]);//传入学生信息结构体数组、各人总分数组，然后返回显示基本信息表格
void disc_range(stu all[], int sum[]);//传入学生信息结构体数组、各人总分数组，然后按总分排名并返回显示排序后的表格



//全局变量声明
static char flag = NULL;//用于存储用户输入的1、2、3、4、5或q 来判断执行菜单项
static int n = N;//n表示当前存储学生信息数 





//主函数进入
int main(){


	stu  s[100] = {
		{ "001", "曹子涵", "男", "江苏", 80, 80, 80 },
		{ "002", "李四", "男", "湖南", 50, 95, 54 },
		{ "003", "呵呵", "女", "美国", 50, 95, 54 },
		{ "004", "张三", "男", "湖南", 90, 95, 90 },
		{ "005", "徐凤年", "男", "北凉", 98, 66, 98 },
		{ "006", "李淳罡", "男", "西藏", 65, 88, 90 },
		{ "007", "王仙芝", "男", "东海", 75, 82, 90 },
		{ "008", "王初冬", "女", "北凉", 80, 77, 95 },
		{ "009", "姜姒", "女", "西楚", 66, 95, 77 }
	};//初始化 当前情况设置最多存储100个学生信息

	int sum[100] = {}, sum_temp;//各人总分数组、总分中间量（用于后面的冒泡排序存储交换值）
	float  sum_vc = 0, sum_eg = 0, sum_mt = 0;//全班vc成绩总合、全班英语成绩总合、全班高数成绩总合

	stu temp;//学生结构体中间量（用于后面的冒泡排序存储交换的结构体）
	char *flag2 = new char[20];//申请一个动态字符串，存储学号或者姓名用于判断查询或删除的信息是否存在（动态内存在程序结尾要释放）

	for (int i = 0; i < n; i++)//计算各人总分（数组）、全班vc总分、全班英语总分、全班高数总分
	{
		sum[i] = s[i].mark_vc + s[i].mark_eg + s[i].mark_mt;
		sum_vc += s[i].mark_vc;
		sum_eg += s[i].mark_eg;
		sum_mt += s[i].mark_mt;
	}

	while (flag != 'q')//q代表退出 ，按其他字符将一直循环显示主界面
	{
		scr_op();//显示主界面并输入单个字符赋给flag（注：若输错 输入多个字符将一次执行多步！）
		switch (flag)
		{
		case '1'://总览信息表格

			system("cls");//清屏功能
			disc(s, sum);
			system("PAUSE");//等待功能
			break;

		case '2'://查询单个
			cout << "请输入要查询的学生的学号或者姓名\n";
			cin >> flag2;
			system("cls");
			for (int i = 0; i < n; i++)
			{
				if (strcmp(flag2, s[i].st_num) == 0 || strcmp(flag2, s[i].st_name) == 0)//strcmp判断两字符串若相等则返回0
				{//输入的只要与其中一个学号或者姓名相等即可成功查询
					cout << "-----------------学号:" << s[i].st_num << "\n";
					cout << "-----------------姓名:" << s[i].st_name << "\n";
					cout << "-----------------性别:" << s[i].st_sex << "\n";
					cout << "-----------------籍贯:" << s[i].st_np << "\n";
					cout << "-----------------vc分数:" << s[i].mark_vc << "\n";
					cout << "-----------------英语分数:" << s[i].mark_eg << "\n";
					cout << "-----------------高数分数:" << s[i].mark_mt << "\n";
					cout << "-----------------总分:" << sum[i] << "\n";
					system("PAUSE");
					break;
				}
				else if (i == (n - 1))
				{
					cout << "查无此人！\n";
					system("PAUSE");
				}
			}
			
			break;

		case '3'://增加一条信息
			s[n] = insert();
			sum[n] = s[n].mark_vc + s[n].mark_eg + s[n].mark_mt;
			cout << "第" << n + 1 << "个学生(" << s[n].st_name << ")的信息插入成功!\n";
			sum_vc += s[n].mark_vc;
			sum_eg += s[n].mark_eg;
			sum_mt += s[n].mark_mt;
			system("PAUSE");
			n++;
			break;

		case '4'://删除一个
			cout << "请输入要删除的学生的学号或者姓名\n";
			cin >> flag2;
			for (int i = 0; i < n; i++)
			{
				if (strcmp(flag2, s[i].st_num) == 0 || strcmp(flag2, s[i].st_name) == 0)
				{//输入的只要与其中一个学号或者姓名相等即可成功删除
					cout << "正在删除[" << s[i].st_name << "]...\n";
					sum_vc -= s[i].mark_vc;
					sum_eg -= s[i].mark_eg;
					sum_mt -= s[i].mark_mt;
					n--;
					//删除只是将删除位后面的数组依次前移，同时各个总分也相应改变（数组长度并没有减短，待优化）
					for (; i < n; i++)
					{
						s[i] = s[i + 1];
						sum[i] = sum[i + 1];
					}
					cout << "删除成功！\n";
					system("PAUSE");
					break;
				}
				else if (i == (n - 1))
				{
					cout << "查无此人！\n";
					system("PAUSE");
				}
			}
			
			break;

		case '5'://排序并显示排位表格
			system("cls");
			for (int j = n; j>0; j--)//冒泡排序法
			{
				for (int i = 0; i < j; i++)
				{
					if (sum[i]<sum[i + 1])
					{
						sum_temp = sum[i];
						temp = s[i];
						sum[i] = sum[i + 1];
						s[i] = s[i + 1];
						sum[i + 1] = sum_temp;
						s[i + 1] = temp;
					}
				}
			}
			cout << "排序完毕！\n";
			cout << "总览信息表已修改。\n\n";

			disc_range(s, sum);//显示排位及其他统计信息
			cout << setw(2) << "|"       //setw表示定宽
				<< setw(24) << "班级均分统计：" << "| "
				<< setw(8) << (sum_vc + sum_eg + sum_mt) / n / 3 << "| "
				<< setw(8) << sum_vc / n << "| "
				<< setw(8) << sum_eg / n << "| "
				<< setw(8) << sum_mt / n << "\n";
			system("PAUSE");
			break;

		case 'q':
			break;

		default:
			cout << "请按规定输入！\n";
			system("PAUSE");
			break;
		}

	}


	//释放动态内存
	delete[] flag2;//将flag2指向的char[20]大小的内存释放
	flag2 = NULL;//将指针指向空，避免无头野指针指向随机



	cout << "---------------------------------成功退出！----------------------------------\n";
	system("PAUSE");

	return 0;
}
//主函数结束







//各函数具体定义（实现）


//用于显示主菜单
void scr_op(){
	system("cls");
	cout << "-----------------------------------------------------------------------------\n";
	cout << "---------------------------欢迎使用XX管理系统--------------------------------\n";
	cout << "---------------------------1、总览信息---------------------------------------\n";
	cout << "---------------------------2、查询学生信息-----------------------------------\n";
	cout << "---------------------------3、添加学生信息-----------------------------------\n";
	cout << "---------------------------4、删除学生信息-----------------------------------\n";
	cout << "---------------------------5、查看排名及其他统计信息-------------------------\n";
	cout << "-----------------------------------------------------------------------------\n";

	cout << "---------------------请输入序号并按“enter”执行对应操作：-------------------\n";
	cout << "---------------------[按'q'退出]---------------------------------------------\n";

	cin >> flag;

}


//增加一个用户输入的学生信息
stu insert()
{
	char*a1 = new char[20],
		*a2 = new char[20],
		*a3 = new char[20],
		*a4 = new char[20];
	int i1, i2, i3;
	cout << "--------------------请输入学号：--------------------------\n";
	cin >> a1;
	cout << "--------------------请输入姓名：--------------------------\n";
	cin >> a2;
	cout << "--------------------请输入性别：--------------------------\n";
	cin >> a3;
	cout << "--------------------请输入籍贯：--------------------------\n";
	cin >> a4;
	cout << "--------------------请输入vc++成绩：--------------------------\n";
	cin >> i1;
	cout << "--------------------请输入英语成绩：--------------------------\n";
	cin >> i2;
	cout << "--------------------请输入高数成绩：--------------------------\n";
	cin >> i3;

	stu ss = { a1, a2, a3, a4, i1, i2, i3 };

	return ss;
}


//传入学生信息结构体数组、各人总分数组，然后返回显示基本信息表格
void disc(stu all[], int sum[])
{
	cout.setf(ios_base::left);//每次输出左对齐

	cout << " ------------------------------------------------------------------------\n";

	cout << setw(2) << "|"        //setw表示定宽
		<< setw(6) << "学号"
		<< setw(11) << "| 姓名"
		<< setw(7) << "| 性别"
		<< setw(7) << "| 籍贯"
		<< setw(10) << "| vc++分数"
		<< setw(10) << "| 英语分数"
		<< setw(10) << "| 高数分数"
		<< setw(10) << "| 三门总分|"
		<< "\n";
	for (int i = 0; i < n; i++)
	{
		cout << "|-------|----------|------|------|---------|---------|---------|---------|\n";

		cout << setw(2) << "|"
			<< setw(6) << all[i].st_num << "| "
			<< setw(9) << all[i].st_name << "| "
			<< setw(5) << all[i].st_sex << "| "
			<< setw(5) << all[i].st_np << "| "
			<< setw(8) << all[i].mark_vc << "| "
			<< setw(8) << all[i].mark_eg << "| "
			<< setw(8) << all[i].mark_mt << "| "
			<< setw(8) << sum[i] << "| \n";
	}
	cout << " ------------------------------------------------------------------------\n";
}

//传入学生信息结构体数组、各人总分数组，然后按总分排名并返回显示排序后的表格
void disc_range(stu all[], int sum[])
{
	int rank = 0, temp = -1;

	cout.setf(ios_base::left);//每次输出左对齐

	cout << " ------------------------------------------------------------------------\n";

	cout << setw(2) << "|"             //setw表示定宽   
		<< setw(6) << "学号"
		<< setw(11) << "| 姓名"
		<< setw(7) << "| 总分"
		<< setw(10) << "| 均分"
		<< setw(10) << "| vc++分数"
		<< setw(10) << "| 英语分数"
		<< setw(10) << "| 高数分数"
		<< setw(6) << "| 排名 |"
		<< "\n";
	for (int i = 0; i < n; i++)
	{
		if (sum[i] != temp)
		{
			rank = i + 1;
		}
		temp = sum[i];

		cout << "|-------|----------|------|---------|---------|---------|---------|------|\n";

		cout << setw(2) << "|"
			<< setw(6) << all[i].st_num << "| "
			<< setw(9) << all[i].st_name << "| "
			<< setw(5) << sum[i] << "| "
			<< setw(8) << sum[i] / 3.00 << "| "
			<< setw(8) << all[i].mark_vc << "| "
			<< setw(8) << all[i].mark_eg << "| "
			<< setw(8) << all[i].mark_mt << "| "
			<< setw(5) << rank << "| \n";
	}
	cout << "|-----------------------------------------------------------------------\n";
}


